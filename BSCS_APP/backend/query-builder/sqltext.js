module.exports = {
    sqlText: {
        ZPTAB: `SELECT DIGITS, ZP.ZPCODE, ZP.DES, SPC.SPECIAL_NUMBER_CLASS_DES SPECIAL_NUMBER
                 FROM MPUZPTAB ZP, SPECIAL_NUMBER SPN, SPECIAL_NUMBER_CLASS SPC
                WHERE DIGITS = :1 AND ZP.ZPCODE = SPN.ZPCODE(+)
                  AND SPN.SPECIAL_NUMBER_CLASS_ID = SPC.SPECIAL_NUMBER_CLASS_ID(+) `,

        GVTAB: `SELECT GVM.GVCODE GV, GV.DES GVDES, VSCODE GVVS, to_char(VSDATE) VSDATE, GVM.ZNCODE ZN, ZN.DES ZNDES, ZOCODE ZO, ZODES, CGI,
                       DEST_NPCODE || '-' || ORIGIN_NPCODE NP
                  FROM MPULKGVM GVM, MPUZNTAB ZN, MPUGVTAB GV WHERE ZPCODE = :1 AND ZN.ZNCODE = GVM.ZNCODE AND GV.GVCODE = GVM.GVCODE `,

        WH_GVTAB_MAXV: `AND GVM.VSCODE = (SELECT MAX(VSCODE) FROM MPULKGVM WHERE ZPCODE = :1 AND GVCODE = GVM.GVCODE AND ZNCODE = GVM.ZNCODE) `,

        RITAB: `SELECT  RIM.RICODE RI, RI.DES RIDES, RIM.VSCODE RIVS, RV1.VSDATE RIVSD, MAX(RV2.VSCODE) MAXRIVS, RV1.UPCODE UP,
                        RV1.UPVSCODE UPVS, RIM.GVCODE GV, RIM.GVVSCODE GVVS, RIM.TTCODE TT, RIM.EXTERNAL_CHARGING_IND EC,
                        RIM.RATE_TYPE_ID RTID, RPE.CONVERSION_MODULE_ID CM, RPE.RATE_PACK_IMC_SCALEFACTOR IMC, RPV.PARAMETER_ROWNUM RN,
                        MIN(DECODE(RPV.PARAMETER_SEQNUM, 1, RPV.PARAMETER_VALUE_FLOAT)) ITV,
                        MIN(DECODE(RPV.PARAMETER_SEQNUM, 2, RPV.PARAMETER_VALUE_FLOAT)) RND,
                        MIN(DECODE(RPV.PARAMETER_SEQNUM, 3, RPV.PARAMETER_VALUE_FLOAT)) RPT,
                        MIN(DECODE(RPV.PARAMETER_SEQNUM, 4, RPV.PARAMETER_VALUE_FLOAT)) PVF, UCQV.UNIT_OF_MEASUREMENT_SHDES UOM,
                        CUR.FCCODE CURR
                FROM MPULKRIM RIM, RATE_PACK_ELEMENT RPE, RATE_PACK_PARAMETER_VALUE RPV, RATE_PACK_CHARGE_QUANTITY RPCQ,
                        UDC_CHARGEABLE_QUANTITY_VIEW UCQV, MPURIVSD RV1, MPURIVSD RV2, MPURITAB RI, FORCURR CUR
                WHERE RIM.GVCODE = :1
                    AND RIM.GVVSCODE = :2
                    AND RIM.ZNCODE = :3
                    AND RI.RICODE = RIM.RICODE
                    AND CUR.FC_ID = RI.CURRENCY
                    AND RV1.RICODE = RIM.RICODE
                    AND RV1.VSCODE = RIM.VSCODE
                    AND RV2.RICODE = RIM.RICODE
                    AND RPE.RATE_PACK_ENTRY_ID = RIM.RATE_PACK_ENTRY_ID
                    AND RPV.RATE_PACK_ELEMENT_ID = RPE.RATE_PACK_ELEMENT_ID
                    AND RPCQ.RICODE = RIM.RICODE
                    AND RPCQ.CHARGEABLE_QUANTITY_UDMCODE = UCQV.CHARGEABLE_QUANTITY_UDMCODE
                    AND RPCQ.UMCODE = UCQV.UMCODE
                    AND UCQV.CHARGEABLE_QUANTITY_UDMCODE =  RPE.CHARGEABLE_QUANTITY_UDMCODE
                    `,

        WH_RITAB_MAXV: `AND RIM.VSCODE = (SELECT MAX(VSCODE) FROM MPULKRIM WHERE RICODE = RIM.RICODE AND GVCODE = :1 AND ZNCODE = :3)
                `,

        GROUPBY_RITAB: `GROUP BY RIM.RICODE, RI.DES, RIM.VSCODE, RV1.VSDATE, RV1.UPCODE, RV1.UPVSCODE, RIM.GVCODE, RIM.GVVSCODE, RIM.TTCODE,
                RIM.EXTERNAL_CHARGING_IND, RIM.RATE_TYPE_ID, RPE.CONVERSION_MODULE_ID, RPE.RATE_PACK_IMC_SCALEFACTOR,
                RPV.PARAMETER_ROWNUM, UCQV.UNIT_OF_MEASUREMENT_SHDES, CUR.FCCODE 
                `,

        HAVING_RITAB: `HAVING RPV.PARAMETER_ROWNUM||MIN(DECODE(RPV.PARAMETER_SEQNUM, 1, RPV.PARAMETER_VALUE_FLOAT))||MIN(DECODE(RPV.PARAMETER_SEQNUM, 2, RPV.PARAMETER_VALUE_FLOAT))
                ||MIN(DECODE(RPV.PARAMETER_SEQNUM, 3, RPV.PARAMETER_VALUE_FLOAT))||MIN(DECODE(RPV.PARAMETER_SEQNUM, 4, RPV.PARAMETER_VALUE_FLOAT)) != '10010'
                AND  RIM.RATE_TYPE_ID || RPV.PARAMETER_ROWNUM || MIN(DECODE(RPV.PARAMETER_SEQNUM, 1, RPV.PARAMETER_VALUE_FLOAT)) || MIN(DECODE(RPV.PARAMETER_SEQNUM, 2, RPV.PARAMETER_VALUE_FLOAT)) 
                || MIN(DECODE(RPV.PARAMETER_SEQNUM, 3, RPV.PARAMETER_VALUE_FLOAT)) || MIN(DECODE(RPV.PARAMETER_SEQNUM, 4, RPV.PARAMETER_VALUE_FLOAT)) != '22109990' 
                AND  RIM.RATE_TYPE_ID || RPV.PARAMETER_ROWNUM || MIN(DECODE(RPV.PARAMETER_SEQNUM, 1, RPV.PARAMETER_VALUE_FLOAT)) || MIN(DECODE(RPV.PARAMETER_SEQNUM, 2, RPV.PARAMETER_VALUE_FLOAT)) 
                || MIN(DECODE(RPV.PARAMETER_SEQNUM, 3, RPV.PARAMETER_VALUE_FLOAT)) || MIN(DECODE(RPV.PARAMETER_SEQNUM, 4, RPV.PARAMETER_VALUE_FLOAT)) != '22102409990' `

    }
}



function getSql(sqlTxt, whereAdd) {
    let sql = this.sqlText[sqlTxt];

    if (whereAdd) {
        let whadd = this.sqlText[whereAdd];
        return sql + whadd;
    }

    return sql;
}

module.exports.getSql = getSql;
